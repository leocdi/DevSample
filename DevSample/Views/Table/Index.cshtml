@model DatatableSampleViewModel

@{
    ViewData["Title"] = "Tables";
    List<Employee> collection = Model.Employees;
}

<link href="~/lib/datatables/DataTables-1.13.6/css/dataTables.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/AutoFill-2.6.0/css/autoFill.bootstrap5.min.css" rel="stylesheet">
<link href="~/lib/datatables/Buttons-2.4.1/css/buttons.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/ColReorder-1.7.0/css/colReorder.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/DateTime-1.5.1/css/dataTables.dateTime.css" rel="stylesheet">
<link href="~/lib/datatables/FixedColumns-4.3.0/css/fixedColumns.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/FixedHeader-3.4.0/css/fixedHeader.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/KeyTable-2.10.0/css/keyTable.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/Responsive-2.5.0/css/responsive.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/RowGroup-1.4.0/css/rowGroup.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/RowReorder-1.4.1/css/rowReorder.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/Scroller-2.2.0/css/scroller.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/SearchBuilder-1.5.0/css/searchBuilder.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/SearchPanes-2.2.0/css/searchPanes.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/Select-1.7.0/css/select.bootstrap5.css" rel="stylesheet">
<link href="~/lib/datatables/StateRestore-1.3.0/css/stateRestore.bootstrap5.css" rel="stylesheet">

<link href="https://code.highcharts.com/css/highcharts.css" rel="stylesheet">

<h1>@ViewData["Title"]</h1>

<hr />

<div class="row">
    <div class="col-md-12">
        <table class="table table-striped employee-datatable">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Employees.First().Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Employees.First().Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Employees.First().Position)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Employees.First().Office)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Employees.First().Age)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Employees.First().StartDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Employees.First().Salary)
                    </th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in collection)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Position)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Office)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Age)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Salary)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <pre><code class="language-csharp">public class Employee
    {
        public string Name { get; set; }
        public int Id { get; set; }
        public string Position { get; set; }
        public string Office { get; set; }
        public int Age { get; set; }
        public DateOnly StartDate { get; set; }
        public decimal Salary { get; set; }
    }</code></pre>
    </div>
</div>


<div class="accordion" id="configAccordion">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingFeatures">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Features
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingFeatures" data-bs-parent="#configAccordion">
            <div class="row m-2">
                @foreach (var item in Model.DatatableConfiguration.Features)
                {
                    <div class="col-md-4">

                        @if (item.OptionDefault.StartsWith("true") || item.OptionDefault.StartsWith("false"))
                        {
                            <div class="form-check form-switch">

                                <input type="checkbox" checked="@(item.OptionDefault == "true")" class="form-check-input" name="@item.Name" id="check-opt-@item.Name" value="@item.OptionDefault" />
                                <input type="hidden" class="form-check-input" name="@item.Name" id="opt-@item.Name" value="@item.OptionDefault" />

                                <label class="form-check-label" for="opt-@item.Name">@item.Name</label>

                            </div>
                        }
                        else
                        {
                            <label class="form-label" for="opt-@item.Name">@item.Name</label>

                            <input class="form-control form-control-sm" type="text" name="@item.Name" id="opt-@item.Name" value="@item.OptionDefault" />
                        }
                        <div id="help-@item.Name" class="form-text">@item.Desc @item.OptionHint</div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingDom">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                Dom
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingDom" data-bs-parent="#configAccordion">
            <div class="row m-2">
                <textarea rows="3" id="dom-config" class="form-control form-control-sm">

                </textarea>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingRender">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
                ColumnDefs
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingRender" data-bs-parent="#configAccordion">
            <div class="row m-2">
                <textarea rows="10" id="columndefs-config" class="form-control form-control-sm">
                [
                    {
                        // The `data` parameter refers to the data for the cell (defined by the
                        // `data` option, which defaults to the column being worked with, in
                        // this case `data: 0`.
                        render: ageRenderer,
                        targets: 4
                    }
                ]
                </textarea>
            </div>
        </div>
    </div>
</div>


<div class="row m-0">
    <button class="btn btn-primary mt-3" onclick="regenererDataTable()">Regenerer</button>
</div>

<div id="demo-output" style="margin-bottom: 1em;" class="chart-display"></div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/lib/datatables/JSZip-3.10.1/jszip.js"></script>
    <script src="~/lib/datatables/pdfmake-0.2.7/pdfmake.js"></script>
    <script src="~/lib/datatables/pdfmake-0.2.7/vfs_fonts.js"></script>
    <script src="~/lib/datatables/DataTables-1.13.6/js/jquery.dataTables.js"></script>
    <script src="~/lib/datatables/DataTables-1.13.6/js/dataTables.bootstrap5.js"></script>
    <script src="~/lib/datatables/AutoFill-2.6.0/js/dataTables.autoFill.js"></script>
    <script src="~/lib/datatables/AutoFill-2.6.0/js/autoFill.bootstrap5.js"></script>
    <script src="~/lib/datatables/Buttons-2.4.1/js/dataTables.buttons.js"></script>
    <script src="~/lib/datatables/Buttons-2.4.1/js/buttons.bootstrap5.js"></script>
    <script src="~/lib/datatables/Buttons-2.4.1/js/buttons.colVis.js"></script>
    <script src="~/lib/datatables/Buttons-2.4.1/js/buttons.html5.js"></script>
    <script src="~/lib/datatables/Buttons-2.4.1/js/buttons.print.js"></script>
    <script src="~/lib/datatables/ColReorder-1.7.0/js/dataTables.colReorder.js"></script>
    <script src="~/lib/datatables/DateTime-1.5.1/js/dataTables.dateTime.js"></script>
    <script src="~/lib/datatables/FixedColumns-4.3.0/js/dataTables.fixedColumns.js"></script>
    <script src="~/lib/datatables/FixedHeader-3.4.0/js/dataTables.fixedHeader.js"></script>
    <script src="~/lib/datatables/KeyTable-2.10.0/js/dataTables.keyTable.js"></script>
    <script src="~/lib/datatables/Responsive-2.5.0/js/dataTables.responsive.js"></script>
    <script src="~/lib/datatables/Responsive-2.5.0/js/responsive.bootstrap5.js"></script>
    <script src="~/lib/datatables/RowGroup-1.4.0/js/dataTables.rowGroup.js"></script>
    <script src="~/lib/datatables/RowReorder-1.4.1/js/dataTables.rowReorder.js"></script>
    <script src="~/lib/datatables/Scroller-2.2.0/js/dataTables.scroller.js"></script>
    <script src="~/lib/datatables/SearchBuilder-1.5.0/js/dataTables.searchBuilder.js"></script>
    <script src="~/lib/datatables/SearchBuilder-1.5.0/js/searchBuilder.bootstrap5.js"></script>
    <script src="~/lib/datatables/SearchPanes-2.2.0/js/dataTables.searchPanes.js"></script>
    <script src="~/lib/datatables/SearchPanes-2.2.0/js/searchPanes.bootstrap5.js"></script>
    <script src="~/lib/datatables/Select-1.7.0/js/dataTables.select.js"></script>
    <script src="~/lib/datatables/StateRestore-1.3.0/js/dataTables.stateRestore.js"></script>
    <script src="~/lib/datatables/StateRestore-1.3.0/js/stateRestore.bootstrap5.js"></script>

    <script src="https://code.highcharts.com/highcharts.js"></script>

    <script type="text/javascript">
        let defaultDom = "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
            "<'row'<'col-sm-12'tr>>" +
            "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>"

        document.getElementById('dom-config').value = defaultDom;


        let defaultColumnDef = [
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case data: 0.
                render: ageRenderer,
                targets: 4
            }
        ]


        //génération table initiale
        let myTable = new DataTable(".employee-datatable",
            {
                info: true,
                ordering: true,
                colReorder: true,
                paging: true,
                dom: defaultDom,
                columnDefs: defaultColumnDef
            });


        //synchro checkbox avec hidden input
        const checkboxs = document.querySelectorAll("input[id^='check-opt']");
        checkboxs.forEach(function (checkbox) {
            checkbox.addEventListener('change', (event) => {
                let targetElement = document.getElementById(checkbox.id.replace('check-', ''));
                if (event.currentTarget.checked) {
                    targetElement.value = true;
                } else {
                    targetElement.value = false;
                }
            })
        })

        // Create chart
        let chart = Highcharts.chart('demo-output', {
            chart: {
                type: 'pie',
                styledMode: true
            },
            title: {
                text: 'Staff Count Per Position'
            },
            series: [
                {
                    data: chartData(myTable)
                }
            ]
        });

        // On each draw, update the data in the chart
        myTable.on('draw', function () {
            chart.series[0].setData(chartData(myTable));
        });

        function chartData(table) {
            var counts = {};

            // Count the number of entries for each position
            table
                .column(1, { search: 'applied' })
                .data()
                .each(function (val) {
                    if (counts[val]) {
                        counts[val] += 1;
                    }
                    else {
                        counts[val] = 1;
                    }
                });

            // And map it to the format highcharts uses
            return $.map(counts, function (val, key) {
                return {
                    name: key,
                    y: val
                };
            });
        }




        function ageRenderer(data, type, row) {
            if (data > 50) {
                return "<span class='text-danger'>" + data + "</span>"
            } else if (data > 40) {
                return "<span class='text-warning'>" + data + "</span>"
            } else {
                return data
            }
        }



        function regenererDataTable() {
            myTable.destroy();
            myTable = new DataTable(".employee-datatable", createConfig());
        }



        function createConfig() {
            const inputs = document.querySelectorAll("input[id^='opt']");
            const domConf = document.getElementById('dom-config');

            let configuration = {};

            //features
            inputs.forEach(function (input) {
                let value = input.value === "true" ? true : input.value === "false" ? false : input.value;
                configuration[input.name] = value;
            });

            //dom
            if (domConf.value !== "") {
                configuration.dom = domConf.value
            }


            return configuration //return the array
        }
    </script>
}

